input {
  tcp {
    port => 5140
    type => syslog
    codec => plain {
                charset => "ISO-8859-1"
             }
  }
  udp {
    port => 5140
    type => syslog
    codec => plain {
                charset => "ISO-8859-1"
             }
  }
  lumberjack {
    port => 5043
    ssl_certificate => "/etc/logstash/conf.d/ssl/logstash-forwarder.crt"
    ssl_key => "/etc/logstash/conf.d/ssl/logstash-forwarder.key"
    type => syslog
  }
}


filter {
  if [type] == "syslog" {
    grok {
      patterns_dir => "/etc/logstash/conf.d/patterns"
      match => [ "message", "%{CYPHORT_SYSLOG_DOWNLOAD}" ]
      match => [ "message", "%{CYPHORT_SYSLOG_SUBMISSION}" ]
      match => [ "message", "%{CYPHORT_SYSLOG_CNC}" ]
      match => [ "message", "%{CYPHORT_SYSLOG_EXPLOIT}" ]
      match => [ "message", "%{CYPHORT_SYSLOG_DATA_THEFT}" ]
      match => [ "message", "%{PAN_BSD_SYSLOG}" ]
      match => [ "message", "%{SOPHOS_WEB_LUMBERJACK}" ]
      match => [ "message", "%{SOPHOS_WEB_LUMBERJACK_MISSING_IP}" ]
      match => [ "message", "%{SOPHOS_DEFAULTTHREATS_LUMBERJACK}" ]
      match => [ "message", "%{SOPHOS_DEFAULTTHREATS_LUMBERJACK_MISSING_IP}" ]
      match => [ "message", "%{STM_WAF_DEFAULT_SLAVE_SYSLOGS}" ]
      match => [ "message", "%{STM_PAGESPEED_SYSLOG}" ]
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }


    # If the src_ip field doesn't exist (some Sophos logs) and it's an alert
    # we're parsing (no _grokparsefailure), put in a placeholder IP of 0.0.0.0
    if ( ![src_ip] and "_grokparsefailure" not in [tags] ) {
      mutate { add_field => { "src_ip" => "0.0.0.0" } }
    }


    # If the src_user field doesn't exist and it's an alert we're parsing
    # (no _grokparsefailure), put in a placeholder name of "unknown"
    if ( ![src_user] and "_grokparsefailure" not in [tags] ) {
      mutate { add_field => { "src_user" => "unknown" } }
    }


    # If the dst_user field doesn't exist and it's an alert we're parsing
    # (no _grokparsefailure), put in a placeholder name of "unknown"
    if ( ![dst_user] and "_grokparsefailure" not in [tags] ) {
      mutate { add_field => { "dst_user" => "unknown" } }
    }


    # Normalize "AD\foo" and "ad\foo" user names
    mutate { lowercase => [ "src_user" ] }
    mutate { lowercase => [ "dst_user" ] }


    syslog_pri { }


    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss", "ISO8601" ]
      # move this to a per-host statement
      timezone => "America/Los_Angeles"
      target => [ "@timestamp" ]
    }


    date {
      match => [ "generation_timestamp", "yyyy/MM/dd HH:mm:ss" ]
      # move this to a per-host statement
      timezone => "America/Los_Angeles"
      target => [ "@timestamp" ] 
    }


    date {
      match => [ "start_time", "yyyy-MM-dd HH:mm:ss.SSSSSSZ" ]
      #timezone => "UTC"
      #timezone => "America/Los_Angeles"
      target => [ "@timestamp" ]
    }


    date {
      match => [ "stm_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      timezone => "UTC"
      target => [ "@timestamp" ]
    }
  }
}


output {
    # the following line is for debugging only. outputs to /var/log/upstart/logstash.log
    # stdout {codec => rubydebug}
    elasticsearch {
    host => "x.x.x.x"
    port => 7104
    protocol => http
    index => "foolog-%{+YYYY.MM.dd}"
  }
}